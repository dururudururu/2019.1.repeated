#################################### Problem 1 ####################################
##1.1. Parameter settings
#Number of individuals
K=100
#Covariate
X_i = matrix(c(1,1,1,1,1,2,3,4),nrow=4, byrow=F)
#Coefficient
beta = matrix(1, nrow=2)

#Theta of MVN
mu_y = X_i %*% beta
sigma_y = matrix(.5, nrow=4, ncol=4); diag(sigma_y)=1

mu_y
sigma_y

##1.2. Data generation
MVNgen <- function(K, mu, sigma) {
  return(mvtnorm::rmvnorm(n=K, mean=mu, sigma=sigma))
}

data <- vector("list", 1000)
for (i in 1:1000) {
  set.seed(i)
  data[[i]] <- MVNgen(K=K, mu_y, sigma_y)
}






##1.3.OLS fitting & robust variance
beta_hat_ols <- matrix(0, nrow=1000, ncol=2)
sigamsq_hat_ols <- 1:1000
for (i in 1:1000) {
  y <- c(t(data[[i]]))
  x <- rep(1:4,100)
  dat <- as.data.frame(cbind(y, x)); names(dat) <-c("y", "x")
  mod1 <- lm(y~x, data=dat)
  beta_hat_ols[i,] <- mod1$coefficients
  sigmasq_hat_ols[i] <- sum(mod1$residuals^2)/(K-2)
}

#simulation coefficients mean & variance
apply(beta_hat_ols,2,function(x) mean(x))
apply(beta_hat_ols,2,function(x) var(x))

#model-based variance estimates
x <- cbind(rep(1,400), rep(1:4,100))
beta_var_ols <- cbind(sigmasq_hat_ols*solve(t(X)%*%X)[1,1],
                      sigmasq_hat_ols*solve(t(X)%*%X)[2,2])

#heteroskedasticity-roubst variance estimates
JV <- function(i) {
  y <- c(t(data[[i]]))
  x <- cbind(rep(1,400), rep(1:4,100))
  beta_tilda <- solve(t(x)%*%x) %*% (t(x)%*%(y-(x%*%beta)))
  JV_estimate <- matrix(0, nrow=2, ncol=2)
  for (j in 1:100) {
    x.i <- x[-(1:4),]
    y.i <- y[-((4*j-3):(4*j))]
    beta_i <- solve(t(x.i) %*%x.i) %*% (t(x.i)%*%(y.i-x.i%*%beta))
    JV_estimate <- JV_estimate + (beta_i-beta_tilda)%*%t((beta_i-beta_tilda))
  }
  return(JV_estimate)
}

beta_var_jv <- matrix(0, nrow=1000, ncol=2)
for (i in 1:1000) {beta_var_jv[i,] <- diag(JV(i))}

#variance comparison: mean & 95% CI coverage probability
apply(beta_var_ols,2,function(x) mean(x))
apply(beta_var_jv,2,function(x) mean(x))

ols.lb <- beta_hat_ols - qt(.975, K-2)*sqrt(beta_var_ols)
ols.ub <- beta_hat_ols + qt(.975, K-2)*sqrt(beta_var_ols)
jv.lb <- beta_hat_ols - qt(.975, K-2)*sqrt(beta_var_jv)
jv.ub <- beta_hat_ols + qt(.975, K-2)*sqrt(beta_var_jv)
beta0_cov_prob_ols <- 0
beta0_cov_prob_jv <- 0
beta1_cov_prob_ols <- 0
beta1_cov_prob_jv <- 0
for (i in 1:1000) {
  if (ols.lb[i,1]<1 & ols.ub[i,1]>1) {beta0_cov_prob_ols <- beta0_cov_prob_ols +1}
  if (jv.lb[i,1]<1 & jv.ub[i,1]>1) {beta0_cov_prob_jv <- beta0_cov_prob_jv +1}
  if (ols.lb[i,2]<1 & ols.ub[i,2]>1) {beta1_cov_prob_ols <- beta1_cov_prob_ols +1}
  if (jv.lb[i,2]<1 & jv.ub[i,2]>1) {beta1_cov_prob_jv <- beta1_cov_prob_jv +1}
}

beta0_cov_prob_jv/1000
beta0_cov_prob_ols/1000
beta1_cov_prob_jv/1000
beta1_cov_prob_ols/1000









##1.4. WLS with unstructured sigma
beta_hat_wls1 <- matrix(0, nrow=1000, ncol=2)
sigma_hat_wls1 <- vector("list", 1000)
for (i in 1:1000) {
  #initial value
  y <- c(t(data[[i]]))
  x <- rep(1:4,100)
  dat <- as.data.frame(cbind(y, x)); names(dat) <-c("y", "x")
  mod1 <- lm(y~x, data=dat)
  
  beta_hat <- mod1$coefficients
  sigma_hat <- matrix(0, nrow=4, ncol=4)
  x <- cbind(rep(1,4),1:4)
  y <- data[[i]]
  epoch=0;  change_beta=1; change_sigma=1
  
  while (change_sigma>10e-12 | change_beta>10e-12) {
    y_hat <- x %*% beta_hat
  
    value_sigma <- rowSums(apply(y, 1, function(xx) {(xx-y_hat)%*%t(xx-y_hat)}))
    sigma_new <- matrix(value_sigma, nrow=4, byrow=T)/K
    
    beta_head <- solve(t(x)%*%solve(sigma_new)%*%x)/K
    beta_tail <- rowSums(apply(y, 1, function(xx) {t(x)%*%solve(sigma_new)%*%xx}))
    beta_new <- beta_head%*%beta_tail
    
    change_sigma = sum((sigma_hat-sigma_new)^2)
    change_beta = sum((beta_hat-beta_new)^2)

    sigma_hat <- sigma_new; beta_hat <- beta_new
    epoch <- epoch+1
    
    if (epoch>10^5) {break}
  }
  
  beta_hat_wls1[i,] <- beta_hat
  sigma_hat_wls1[[i]] <- sigma_hat
  print(i)
}

beta_hat_wls1 <- matrix(0, nrow=1000, ncol=2)
sigma_hat_wls1 <- vector("list", 1000)
### using nlme::gls ###
for (i in 1:1000) {
  y <- c(t(data[[i]]))
  x <- rep(1:4,100)
  id <- seq(1:100, each=4)
  dat <- as.data.frame(cbind(id, y, x)); names(dat) <-c("id", "y", "x")
  mod2 <- gls(y~x, data=dat, 
              correlation=corSymm(form=~1|id), 
              weights=varIdent(form=~1|x))
  beta_hat_wls1[i,] <- mod2$coefficients
  mod2$sigma
}
#simulation coefficients mean & variance
apply(beta_hat_wls1,2,function(x) mean(x))
apply(beta_hat_wls1,2,function(x) var(x))

#model-based variance estimates
apply(simplify2array(sigma_hat_wls1), 1:2, mean)




##1.5. WLS with intraclass sigma


#################################### Problem 2 ####################################
