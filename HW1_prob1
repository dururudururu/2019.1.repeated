---
title: "Analysis of Repeated Measurements HW1"
author: "2019-34930, Changsu Lee"
date: "2019년 3월 27일"
output: word_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Problem 1
##1.1. Data generation
First step is to generate 1,000 simulation dataset. $y$ follows *MVN*_4($X_i\beta,\Sigma$)  
$$ X_{i} = \left[\begin{array}{rr}1&1\\1&2\\1&3\\1&4\end{array}\right],\qquad
\Sigma=\left[\begin{array}{rrrr}1&.5&.5&.5\\.5&1&.5&.5\\.5&.5&1&.5\\.5&.5&.5&1\end{array}\right],\qquad
\beta=\left[\begin{array}{r}1\\1\end{array}\right]$$
```{r}
#Number of individuals
K=100
#Covariate
X_i = matrix(c(1,1,1,1,1,2,3,4),nrow=4, byrow=F)
#Coefficient
beta = matrix(1, nrow=2)
#MVN parametrization
mu_y = X_i %*% beta
sigma_y = matrix(.5, nrow=4, ncol=4); diag(sigma_y)=1
mu_y
sigma_y

#y for 1,000 simulation
library(mvtnorm)
data <- vector("list", 1000)
for (i in 1:1000) {
  set.seed(i)
  data[[i]] <- rmvnorm(n=K, mean=mu_y, sigma=sigma_y)
}
#dataset for regression
data_lm <- vector("list", 1000)
for (i in 1:1000) {
  y <- c(t(data[[i]]))
  x <- rep(1:4,100)
  id <- rep(1:100, each=4)
  temp <- as.data.frame(cbind(id, y, x)); names(temp) <-c("id", "y", "x")
  data_lm[[i]] <- temp
}

```



##1.2. Function define
Here, we define two functions. First one is sandwich variance calculator, second one is confidence interval generater.
```{r}

### Robust variance estimator
robust_var <- function(data, beta_tilda, type) {
  # data from data[[i]]
  value <- apply(data, 1, function(x) {
    (x-X_i%*%beta_tilda) %*% t(x-X_i%*%beta_tilda)}
    )
  value <- rowSums(value)
  V_hat <- matrix(value, nrow=4, byrow=T)/K
  W = solve(V_hat)
  if (type=="ols") {W=diag(4)}
  
  bread <- solve(t(X_i)%*%W%*%X_i)/K
  ham <- (t(X_i)%*%W%*%V_hat%*%W%*%X_i)*K
  return(bread %*% ham %*% t(bread))
}

### CI calculation
getCI <- function(beta_hat, beta_var) {
  #beta_var -> vector with beta0_var, beta1_var
  #estimated distribution assumed to follow student's t
  lb = beta_hat - qt(.975, K-2)*sqrt(beta_var)
  ub = beta_hat + qt(.975, K-2)*sqrt(beta_var)
  temp <- cbind(lb, ub); row.names(temp) <- c("beta0", "beta1")
  return(temp)
}
```


##1.3. Model fitting
R function **lm**(for ols) and **nlme::gls**(for wls) were used.
###A.OLS estimates
```{r}
beta_hat_ols <- matrix(0, nrow=1000, ncol=2)
sigma_hat_ols <- 1:1000
for (i in 1:1000) {
  mod1 <- lm(y~x, data=data_lm[[i]])
  beta_hat_ols[i,] <- mod1$coefficients
  sigma_hat_ols[i] <- sum(mod1$residuals^2)/(K-2)
}
```


###B.WLS estimates w/ unstructured variance
```{r}
library(nlme)
beta_hat_wls1 <- matrix(0, nrow=1000, ncol=2)
beta_var_wls1 <- matrix(0, nrow=1000, ncol=2)
for (i in 1:1000) {
  mod2 <- gls(y~x, data=data_lm[[i]], 
              correlation=corSymm(form=~1|id),
              weights=varIdent(form=~1|x))
  beta_hat_wls1[i,] <- mod2$coefficients
  beta_var_wls1[i,] <- diag(mod2$varBeta)
}
```


###C.WLS estimates w/ intraclass variance
```{r}
beta_hat_wls2 <- matrix(0, nrow=1000, ncol=2)
beta_var_wls2 <- matrix(0, nrow=1000, ncol=2)
for (i in 1:1000) {
  mod3 <- gls(y~x, data=data_lm[[i]], 
              correlation=corCompSymm(form=~1|id), 
              weights=varIdent())
  beta_hat_wls2[i,] <- mod3$coefficients
  beta_var_wls2[i,] <- diag(mod3$varBeta)
}
```


###D.WLS estimates w/ AR1 variance
```{r}
beta_hat_wls3 <- matrix(0, nrow=1000, ncol=2)
beta_var_wls3 <- matrix(0, nrow=1000, ncol=2)
for (i in 1:1000) {
  mod4 <- gls(y~x, data=data_lm[[i]], 
              correlation=corAR1(form=~1|id), 
              weights=varIdent())
  beta_hat_wls3[i,] <- mod4$coefficients
  beta_var_wls3[i,] <- diag(mod4$varBeta)
}
```


##1.4. Calculate a.model-based variance, b.robust variance.  (model-based variances of wls were calcuated in 1.3.fitting section)
```{r}
#model-based variance estimates
X <- cbind(rep(1,400), rep(1:4,100))
beta_var_ols <- vector("list", 1000)
for (i in 1:1000) {beta_var_ols[[i]] <- sigma_hat_ols[i]*(solve(t(X)%*%X))}


#robust variance estimates - sandwich variance
beta_var_robust_ols <- vector("list", 1000)
beta_var_robust_wls1 <- vector("list", 1000)
beta_var_robust_wls2 <- vector("list", 1000)
beta_var_robust_wls3 <- vector("list", 1000)

for (i in 1:1000) {
  beta_var_robust_ols[[i]] <- robust_var(data=data[[i]], beta_tilda = beta_hat_ols[i,], type="ols")
  beta_var_robust_wls1[[i]] <- robust_var(data=data[[i]], beta_tilda = beta_hat_wls1[i,], type="wls")
  beta_var_robust_wls2[[i]] <- robust_var(data=data[[i]], beta_tilda = beta_hat_wls2[i,], type="wls")
  beta_var_robust_wls3[[i]] <- robust_var(data=data[[i]], beta_tilda = beta_hat_wls3[i,], type="wls")
  }
```


##1.5. Calculate CI and coverage probabilities
###A.OLS
```{r}
library(spatstat.utils)
coverage_p_ols <- c(0,0)
coverage_p_robust_ols <- c(0,0)
for (i in 1:1000) {
  CI <- getCI(beta_hat_ols[i,], diag(beta_var_ols[[i]]))
  coverage_p_ols[1] <- coverage_p_ols[1] + inside.range(1, CI[1,])
  coverage_p_ols[2] <- coverage_p_ols[2] + inside.range(1, CI[2,])
  CI <- getCI(beta_hat_ols[i,], diag(beta_var_robust_ols[[i]]))
  coverage_p_robust_ols[1] <- coverage_p_robust_ols[1] + inside.range(1, CI[1,])
  coverage_p_robust_ols[2] <- coverage_p_robust_ols[2] + inside.range(1, CI[2,])
}
```


###B.WLS w/ unstructured variance
```{r}
coverage_p_wls1 <- c(0,0)
coverage_p_robust_wls1 <- c(0,0)
for (i in 1:1000) {
  CI <- getCI(beta_hat_wls1[i,], beta_var_wls1[i,])
  coverage_p_wls1[1] <- coverage_p_wls1[1] + inside.range(1, CI[1,])
  coverage_p_wls1[2] <- coverage_p_wls1[2] + inside.range(1, CI[2,])
  CI <- getCI(beta_hat_wls1[i,], diag(beta_var_robust_wls1[[i]]))
  coverage_p_robust_wls1[1] <- coverage_p_robust_wls1[1] + inside.range(1, CI[1,])
  coverage_p_robust_wls1[2] <- coverage_p_robust_wls1[2] + inside.range(1, CI[2,])
}
```


###C.WLS w/ intraclass variance
```{r}
coverage_p_wls2 <- c(0,0)
coverage_p_robust_wls2 <- c(0,0)
for (i in 1:1000) {
  CI <- getCI(beta_hat_wls2[i,], beta_var_wls2[i,])
  coverage_p_wls2[1] <- coverage_p_wls2[1] + inside.range(1, CI[1,])
  coverage_p_wls2[2] <- coverage_p_wls2[2] + inside.range(1, CI[2,])
  CI <- getCI(beta_hat_wls2[i,], diag(beta_var_robust_wls2[[i]]))
  coverage_p_robust_wls2[1] <- coverage_p_robust_wls2[1] + inside.range(1, CI[1,])
  coverage_p_robust_wls2[2] <- coverage_p_robust_wls2[2] + inside.range(1, CI[2,])
}
```


###D.WLS w/ AR1 variance
```{r}
coverage_p_wls3 <- c(0,0)
coverage_p_robust_wls3 <- c(0,0)
for (i in 1:1000) {
  CI <- getCI(beta_hat_wls3[i,], beta_var_wls3[i,])
  coverage_p_wls3[1] <- coverage_p_wls3[1] + inside.range(1, CI[1,])
  coverage_p_wls3[2] <- coverage_p_wls3[2] + inside.range(1, CI[2,])
  CI <- getCI(beta_hat_wls3[i,], diag(beta_var_robust_wls3[[i]]))
  coverage_p_robust_wls3[1] <- coverage_p_robust_wls3[1] + inside.range(1, CI[1,])
  coverage_p_robust_wls3[2] <- coverage_p_robust_wls3[2] + inside.range(1, CI[2,])
}
```


##Q1.1. Mean of the estimates & simulation variance
```{r echo=FALSE}
#OLS
m1<-apply(beta_hat_ols,2,function(x) mean(x))
v1<-apply(beta_hat_ols,2,function(x) var(x))
#WLS1
m2<-apply(beta_hat_wls1,2,function(x) mean(x))
v2<-apply(beta_hat_wls1,2,function(x) var(x))
#WLS2
m3<-apply(beta_hat_wls2,2,function(x) mean(x))
v3<-apply(beta_hat_wls2,2,function(x) var(x))
#WLS3
m4<-apply(beta_hat_wls3,2,function(x) mean(x))
v4<-apply(beta_hat_wls3,2,function(x) var(x))
#matrix form
table <- matrix(c(m1[1], v1[1], m1[2], v1[2],
                  m2[1], v2[1], m2[2], v2[2],
                  m3[1], v3[1], m3[2], v3[2],
                  m4[1], v4[1], m4[2], v4[2]),
                nrow=4, byrow=T)
row.names(table) <- c("OLS", "WLS/un", "WLS/intra", "WLS/AR1")
colnames(table) <- c("mean_beta0", "var_beta0", "mean_beta1", "var_beta1")
table
```


##Q1.2. Mean of model-based & robust variance estimates
```{r echo=FALSE}
#OLS
m1<-diag(apply(simplify2array(beta_var_ols), 1:2, mean))
mr1<-diag(apply(simplify2array(beta_var_robust_ols), 1:2, mean))
#WLS1
m2<-colMeans(beta_var_wls1)
mr2<-diag(apply(simplify2array(beta_var_robust_wls1), 1:2, mean))
#WLS2
m3<-colMeans(beta_var_wls2)
mr3<-diag(apply(simplify2array(beta_var_robust_wls2), 1:2, mean))
#WLS3
m4<-colMeans(beta_var_wls3)
mr4<-diag(apply(simplify2array(beta_var_robust_wls3), 1:2, mean))
#matrix form
table <- matrix(c(m1[1], mr1[1], m1[2], mr1[2],
                  m2[1], mr2[1], m2[2], mr2[2],
                  m3[1], mr3[1], m3[2], mr3[2],
                  m4[1], mr4[1], m4[2], mr4[2]),
                nrow=4, byrow=T)
row.names(table) <- c("OLS", "WLS/un", "WLS/intra", "WLS/AR1")
colnames(table) <- c("beta0_model", "beta0_robust", "beta1_model", "beta1_robust")
table
```


##Q1.3. 95% coverage probabilities of model-based & robust CI
```{r echo=FALSE}
#OLS
p1<-coverage_p_ols/10
pr1<-coverage_p_robust_ols/10
#WLS1
p2<-coverage_p_wls1/10
pr2<-coverage_p_robust_wls1/10
#WLS2
p3<-coverage_p_wls2/10
pr3<-coverage_p_robust_wls2/10
#WLS3
p4<-coverage_p_wls3/10
pr4<-coverage_p_robust_wls3/10
#matrix form
table <- matrix(c(p1[1], pr1[1], p1[2], pr1[2],
                  p2[1], pr2[1], p2[2], pr2[2],
                  p3[1], pr3[1], p3[2], pr3[2],
                  p4[1], pr4[1], p4[2], pr4[2]),
                nrow=4, byrow=T)
row.names(table) <- c("OLS", "WLS/un", "WLS/intra", "WLS/AR1")
colnames(table) <- c("beta0_model", "beta0_robust", "beta1_model", "beta1_robust")
table
```
